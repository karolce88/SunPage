"use strict";function _typeof(n){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function _defineProperties(n,t){for(var e=0;e<t.length;e++){var i=t[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}function _createClass(n,t,e){return t&&_defineProperties(n.prototype,t),e&&_defineProperties(n,e),Object.defineProperty(n,"prototype",{writable:!1}),n}!function(n){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):("undefined"!=typeof globalThis?globalThis:self).Splide=n()}(function(){var p="(prefers-reduced-motion: reduce)",R=4,en=5,i={CREATED:1,MOUNTED:2,IDLE:3,MOVING:R,SCROLLING:en,DRAGGING:6,DESTROYED:7};function D(n){n.length=0}function o(n,t,e){return Array.prototype.slice.call(n,t,e)}function O(n){return n.bind.apply(n,[null].concat(o(arguments,1)))}function on(){}var h=setTimeout;function v(n){return requestAnimationFrame(n)}function r(n,t){return _typeof(t)===n}function rn(n){return!s(n)&&r("object",n)}var u=Array.isArray,E=O(r,"function"),T=O(r,"string"),un=O(r,"undefined");function s(n){return null===n}function m(n){try{return n instanceof(n.ownerDocument.defaultView||window).HTMLElement}catch(n){return!1}}function y(n){return u(n)?n:[n]}function g(n,t){y(n).forEach(t)}function b(n,t){return-1<n.indexOf(t)}function S(n,t){return n.push.apply(n,y(t)),n}function k(t,n,e){t&&g(n,function(n){n&&t.classList[e?"add":"remove"](n)})}function M(n,t){k(n,T(t)?t.split(" "):t,!0)}function P(n,t){g(t,n.appendChild.bind(n))}function _(n,e){g(n,function(n){var t=(e||n).parentNode;t&&t.insertBefore(n,e)})}function sn(n,t){return m(n)&&(n.msMatchesSelector||n.matches).call(n,t)}function x(n,t){n=n?o(n.children):[];return t?n.filter(function(n){return sn(n,t)}):n}function cn(n,t){return t?x(n,t)[0]:n.firstElementChild}var C=Object.keys;function w(t,e,n){t&&(n?C(t).reverse():C(t)).forEach(function(n){"__proto__"!==n&&e(t[n],n)})}function an(i){return o(arguments,1).forEach(function(e){w(e,function(n,t){i[t]=e[t]})}),i}function d(e){return o(arguments,1).forEach(function(n){w(n,function(n,t){u(n)?e[t]=n.slice():rn(n)?e[t]=d({},rn(e[t])?e[t]:{},n):e[t]=n})}),e}function ln(t,n){g(n||C(t),function(n){delete t[n]})}function z(n,e){g(n,function(t){g(e,function(n){t&&t.removeAttribute(n)})})}function N(e,t,i){rn(t)?w(t,function(n,t){N(e,t,n)}):g(e,function(n){s(i)||""===i?z(n,t):n.setAttribute(t,String(i))})}function I(n,t,e){n=document.createElement(n);return t&&(T(t)?M:N)(n,t),e&&P(e,n),n}function L(n,t,e){if(un(e))return getComputedStyle(n)[t];s(e)||(n.style[t]=""+e)}function fn(n,t){L(n,"display",t)}function dn(n){n.setActive&&n.setActive()||n.focus({preventScroll:!0})}function A(n,t){return n.getAttribute(t)}function pn(n,t){return n&&n.classList.contains(t)}function F(n){return n.getBoundingClientRect()}function j(n){g(n,function(n){n&&n.parentNode&&n.parentNode.removeChild(n)})}function vn(n){return cn((new DOMParser).parseFromString(n,"text/html").body)}function W(n,t){n.preventDefault(),t&&(n.stopPropagation(),n.stopImmediatePropagation())}function hn(n,t){return n&&n.querySelector(t)}function gn(n,t){return t?o(n.querySelectorAll(t)):[]}function X(n,t){k(n,t,!1)}function mn(n){return n.timeStamp}function G(n){return T(n)?n:n?n+"px":""}var yn="splide",c="data-"+yn;function bn(n,t){if(!n)throw new Error("["+yn+"] "+(t||""))}var B=Math.min,wn=Math.max,En=Math.floor,Sn=Math.ceil,H=Math.abs;function xn(n,t,e){return H(n-t)<e}function Cn(n,t,e,i){var o=B(t,e),t=wn(t,e);return i?o<n&&n<t:o<=n&&n<=t}function q(n,t,e){var i=B(t,e),t=wn(t,e);return B(wn(i,n),t)}function Pn(n){return(0<n)-(n<0)}function _n(t,n){return g(n,function(n){t=t.replace("%s",""+n)}),t}function kn(n){return n<10?"0"+n:""+n}var Ln={};function An(){var s=[];function e(n,e,i){g(n,function(t){t&&g(e,function(n){n.split(" ").forEach(function(n){n=n.split(".");i(t,n[0],n[1])})})})}return{bind:function(n,t,r,u){e(n,t,function(n,t,e){var i="addEventListener"in n,o=i?n.removeEventListener.bind(n,t,r,u):n.removeListener.bind(n,r);i?n.addEventListener(t,r,u):n.addListener(r),s.push([n,t,e,r,o])})},unbind:function(n,t,o){e(n,t,function(t,e,i){s=s.filter(function(n){return!!(n[0]!==t||n[1]!==e||n[2]!==i||o&&n[3]!==o)||(n[4](),!1)})})},dispatch:function(n,t,e){var i;return"function"==typeof CustomEvent?i=new CustomEvent(t,{bubbles:!0,detail:e}):(i=document.createEvent("CustomEvent")).initCustomEvent(t,!0,!1,e),n.dispatchEvent(i),i},destroy:function(){s.forEach(function(n){n[4]()}),D(s)}}}var Y="mounted",U="move",Dn="moved",Mn="click",zn="active",Nn="inactive",On="visible",Tn="hidden",J="refresh",K="updated",In="resize",Fn="resized",jn="scroll",V="scrolled",a="destroy",Rn="navigation:mounted",Wn="autoplay:play",Xn="autoplay:pause",Gn="lazyload:loaded",Bn="sk",Hn="sh";function Q(n){var e=n?n.event.bus:document.createDocumentFragment(),i=An();return n&&n.event.on(a,i.destroy),an(i,{bus:e,on:function(n,t){i.bind(e,y(n).join(" "),function(n){t.apply(t,u(n.detail)?n.detail:[])})},off:O(i.unbind,e),emit:function(n){i.dispatch(e,n,o(arguments,1))}})}function qn(t,n,e,i){var o,r,u=Date.now,s=0,c=!0,a=0;function l(){if(!c){if(s=t?B((u()-o)/t,1):1,e&&e(s),1<=s&&(n(),o=u(),i)&&++a>=i)return f();r=v(l)}}function f(){c=!0}function d(){r&&cancelAnimationFrame(r),c=!(r=s=0)}return{start:function(n){n||d(),o=u()-(n?s*t:0),c=!1,r=v(l)},rewind:function(){o=u(),s=0,e&&e(s)},pause:f,cancel:d,set:function(n){t=n},isPaused:function(){return c}}}function l(n){var t=n;return{set:function(n){t=n},is:function(n){return b(y(n),t)}}}var n="Arrow",Yn=n+"Left",Un=n+"Right",t=n+"Up",n=n+"Down",Jn="ttb",f={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[t,Un],ArrowRight:[n,Yn]};var Z="role",$="tabindex",e="aria-",Kn=e+"controls",Vn=e+"current",Qn=e+"selected",nn=e+"label",Zn=e+"labelledby",$n=e+"hidden",nt=e+"orientation",tt=e+"roledescription",et=e+"live",it=e+"busy",ot=e+"atomic",rt=[Z,$,"disabled",Kn,Vn,nn,Zn,$n,nt,tt],e=yn+"__",ut=yn,st=e+"track",ct=e+"list",at=e+"slide",lt=at+"--clone",ft=at+"__container",dt=e+"arrows",pt=e+"arrow",vt=pt+"--prev",ht=pt+"--next",gt=e+"pagination",mt=gt+"__page",yt=e+"progress"+"__bar",bt=e+"toggle",wt=e+"sr",tn="is-active",Et="is-prev",St="is-next",xt="is-visible",Ct="is-loading",Pt="is-focus-in",_t="is-overflow",kt=[tn,xt,Et,St,Ct,Pt,_t];var Lt="touchstart mousedown",At="touchmove mousemove",Dt="touchend touchcancel mouseup click";var Mt="slide",zt="loop",Nt="fade";function Ot(o,i,t,r){var u,n=Q(o),e=n.on,s=n.emit,c=n.bind,a=o.Components,l=o.root,f=o.options,d=f.isNavigation,p=f.updateOnMove,v=f.i18n,h=f.pagination,g=f.slideFocus,m=a.Direction.resolve,y=A(r,"style"),b=A(r,nn),w=-1<t,E=cn(r,"."+ft);function S(){var n=o.splides.map(function(n){n=n.splide.Components.Slides.getAt(i);return n?n.slide.id:""}).join(" ");N(r,nn,_n(v.slideX,(w?t:i)+1)),N(r,Kn,n),N(r,Z,g?"button":""),g&&z(r,tt)}function x(){u||C()}function C(){var n,t,e;u||(n=o.index,(e=P())!==pn(r,tn)&&(k(r,tn,e),N(r,Vn,d&&e||""),s(e?zn:Nn,_)),e=function(){if(o.is(Nt))return P();var n=F(a.Elements.track),t=F(r),e=m("left",!0),i=m("right",!0);return En(n[e])<=Sn(t[e])&&En(t[i])<=Sn(n[i])}(),t=!e&&(!P()||w),o.state.is([R,en])||N(r,$n,t||""),N(gn(r,f.focusableNodes||""),$,t?-1:""),g&&N(r,$,t?-1:0),e!==pn(r,xt)&&(k(r,xt,e),s(e?On:Tn,_)),e||document.activeElement!==r||(t=a.Slides.getAt(o.index))&&dn(t.slide),k(r,Et,i===n-1),k(r,St,i===n+1))}function P(){var n=o.index;return n===i||f.cloneStatus&&n===t}var _={index:i,slideIndex:t,slide:r,container:E,isClone:w,mount:function(){w||(r.id=l.id+"-slide"+kn(i+1),N(r,Z,h?"tabpanel":"group"),N(r,tt,v.slide),N(r,nn,b||_n(v.slideLabel,[i+1,o.length]))),c(r,"click",O(s,Mn,_)),c(r,"keydown",O(s,Bn,_)),e([Dn,Hn,V],C),e(Rn,S),p&&e(U,x)},destroy:function(){u=!0,n.destroy(),X(r,kt),z(r,rt),N(r,"style",y),N(r,nn,b||"")},update:C,style:function(n,t,e){L(e&&E||r,n,t)},isWithin:function(n,t){return n=H(n-i),(n=w||!f.rewind&&!o.is(zt)?n:B(n,o.length-n))<=t}};return _}var Tt=c+"-interval";var It={passive:!1,capture:!0};var Ft={Spacebar:" ",Right:Un,Left:Yn,Up:t,Down:n};function jt(n){return n=T(n)?n:n.key,Ft[n]||n}var Rt="keydown";var Wt=c+"-lazy",Xt=Wt+"-srcset",Gt="["+Wt+"], ["+Xt+"]";var Bt=[" ","Enter"];var Ht=Object.freeze({__proto__:null,Media:function(i,n,o){var r=i.state,t=o.breakpoints||{},u=o.reducedMotion||{},e=An(),s=[];function c(n){n&&e.destroy()}function a(n,t){t=matchMedia(t);e.bind(t,"change",l),s.push([n,t])}function l(){var n=r.is(7),t=o.direction,e=s.reduce(function(n,t){return d(n,t[1].matches?t[0]:{})},{});ln(o),f(e),o.destroy?i.destroy("completely"===o.destroy):n?(c(!0),i.mount()):t!==o.direction&&i.refresh()}function f(n,t,e){d(o,n),t&&d(Object.getPrototypeOf(o),n),!e&&r.is(1)||i.emit(K,o)}return{setup:function(){var e="min"===o.mediaQuery;C(t).sort(function(n,t){return e?+n-+t:+t-+n}).forEach(function(n){a(t[n],"("+(e?"min":"max")+"-width:"+n+"px)")}),a(u,p),l()},destroy:c,reduce:function(n){matchMedia(p).matches&&(n?d(o,u):ln(o,C(u)))},set:f}},Direction:function(n,t,o){return{resolve:function(n,t,e){var i="rtl"!==(e=e||o.direction)||t?e===Jn?0:-1:1;return f[n]&&f[n][i]||n.replace(/width|left|right/i,function(n,t){n=f[n.toLowerCase()][i]||n;return 0<t?n.charAt(0).toUpperCase()+n.slice(1):n})},orient:function(n){return n*("rtl"===o.direction?1:-1)}}},Elements:function(n,t,e){var i,o,r,u=Q(n),s=u.on,c=u.bind,a=n.root,l=e.i18n,f={},d=[],p=[],v=[];function h(){i=y("."+st),o=cn(i,"."+ct),bn(i&&o,"A track/list element is missing."),S(d,x(o,"."+at+":not(."+lt+")")),w({arrows:dt,pagination:gt,prev:vt,next:ht,bar:yt,toggle:bt},function(n,t){f[t]=y("."+n)}),an(f,{root:a,track:i,list:o,slides:d});var n=a.id||function(n){return""+n+kn(Ln[n]=(Ln[n]||0)+1)}(yn),t=e.role;a.id=n,i.id=i.id||n+"-track",o.id=o.id||n+"-list",!A(a,Z)&&"SECTION"!==a.tagName&&t&&N(a,Z,t),N(a,tt,l.carousel),N(o,Z,"presentation"),m()}function g(n){var t=rt.concat("style");D(d),X(a,p),X(i,v),z([i,o],t),z(a,n?t:["style",tt])}function m(){X(a,p),X(i,v),p=b(ut),v=b(st),M(a,p),M(i,v),N(a,nn,e.label),N(a,Zn,e.labelledby)}function y(n){n=hn(a,n);return n&&function(n,t){if(E(n.closest))return n.closest(t);for(var e=n;e&&1===e.nodeType&&!sn(e,t);)e=e.parentElement;return e}(n,"."+ut)===a?n:void 0}function b(n){return[n+"--"+e.type,n+"--"+e.direction,e.drag&&n+"--draggable",e.isNavigation&&n+"--nav",n===ut&&tn]}return an(f,{setup:h,mount:function(){s(J,g),s(J,h),s(K,m),c(document,Lt+" keydown",function(n){r="keydown"===n.type},{capture:!0}),c(a,"focusin",function(){k(a,Pt,!!r)})},destroy:g})},Slides:function(i,o,r){var n=Q(i),t=n.on,u=n.emit,s=n.bind,c=(n=o.Elements).slides,a=n.list,l=[];function e(){c.forEach(function(n,t){d(n,t,-1)})}function f(){v(function(n){n.destroy()}),D(l)}function d(n,t,e){t=Ot(i,t,e,n);t.mount(),l.push(t),l.sort(function(n,t){return n.index-t.index})}function p(n){return n?h(function(n){return!n.isClone}):l}function v(n,t){p(t).forEach(n)}function h(t){return l.filter(E(t)?t:function(n){return T(t)?sn(n.slide,t):b(y(t),n.index)})}return{mount:function(){e(),t(J,f),t(J,e)},destroy:f,update:function(){v(function(n){n.update()})},register:d,get:p,getIn:function(n){var t=o.Controller,e=t.toIndex(n),i=t.hasFocus()?1:r.perPage;return h(function(n){return Cn(n.index,e,e+i-1)})},getAt:function(n){return h(n)[0]},add:function(n,o){g(n,function(n){var t,e,i;m(n=T(n)?vn(n):n)&&((t=c[o])?_(n,t):P(a,n),M(n,r.classes.slide),t=n,e=O(u,In),t=gn(t,"img"),(i=t.length)?t.forEach(function(n){s(n,"load error",function(){--i||e()})}):e())}),u(J)},remove:function(n){j(h(n).map(function(n){return n.slide})),u(J)},forEach:v,filter:h,style:function(t,e,i){v(function(n){n.style(t,e,i)})},getLength:function(n){return(n?c:l).length},isEnough:function(){return l.length>r.perPage}}},Layout:function(t,n,e){var i,o,r,u=(a=Q(t)).on,s=a.bind,c=a.emit,a=n.Slides,l=n.Direction.resolve,f=(n=n.Elements).root,d=n.track,p=n.list,v=a.getAt,h=a.style;function g(){i=e.direction===Jn,L(f,"maxWidth",G(e.width)),L(d,l("paddingLeft"),y(!1)),L(d,l("paddingRight"),y(!0)),m(!0)}function m(n){var t=F(f);!n&&o.width===t.width&&o.height===t.height||(L(d,"height",function(){var n="";i&&(bn(n=b(),"height or heightRatio is missing."),n="calc("+n+" - "+y(!1)+" - "+y(!0)+")");return n}()),h(l("marginRight"),G(e.gap)),h("width",e.autoWidth?null:G(e.fixedWidth)||(i?"":w())),h("height",G(e.fixedHeight)||(i?e.autoHeight?null:w():b()),!0),o=t,c(Fn),r===(r=_()))||(k(f,_t,r),c("overflow",r))}function y(n){var t=e.padding,n=l(n?"right":"left");return t&&G(t[n]||(rn(t)?0:t))||"0px"}function b(){return G(e.height||F(p).width*e.heightRatio)}function w(){var n=G(e.gap);return"calc((100%"+(n&&" + "+n)+")/"+(e.perPage||1)+(n&&" - "+n)+")"}function E(){return F(p)[l("width")]}function S(n,t){n=v(n||0);return n?F(n.slide)[l("width")]+(t?0:P()):0}function x(n,t){var e,n=v(n);return n?(n=F(n.slide)[l("right")],e=F(p)[l("left")],H(n-e)+(t?0:P())):0}function C(n){return x(t.length-1)-x(0)+S(0,n)}function P(){var n=v(0);return n&&parseFloat(L(n.slide,l("marginRight")))||0}function _(){return t.is(Nt)||C(!0)>E()}return{mount:function(){var n,t,e;g(),s(window,"resize load",(n=O(c,In),e=qn(t||0,n,null,1),function(){e.isPaused()&&e.start()})),u([K,J],g),u(In,m)},resize:m,listSize:E,slideSize:S,sliderSize:C,totalSize:x,getPadding:function(n){return parseFloat(L(d,l("padding"+(n?"Right":"Left"))))||0},isOverflow:_}},Clones:function(s,e,c){var t,i=Q(s),n=i.on,a=e.Elements,l=e.Slides,o=e.Direction.resolve,f=[];function r(){if(n(J,d),n([K,In],p),t=v()){var o=t,r=l.get().slice(),u=r.length;if(u){for(;r.length<o;)S(r,r);S(r.slice(-o),r.slice(0,o)).forEach(function(n,t){var e=t<o,i=function(n,t){n=n.cloneNode(!0);return M(n,c.classes.clone),n.id=s.root.id+"-clone"+kn(t+1),n}(n.slide,t);e?_(i,r[0].slide):P(a.list,i),S(f,i),l.register(i,t-o+(e?0:u),n.index)})}e.Layout.resize(!0)}}function d(){u(),r()}function u(){j(f),D(f),i.destroy()}function p(){var n=v();t!==n&&(t<n||!n)&&i.emit(J)}function v(){var n,t=c.clones;return s.is(zt)?un(t)&&(t=(n=c[o("fixedWidth")]&&e.Layout.slideSize(0))&&Sn(F(a.track)[o("width")]/n)||c[o("autoWidth")]&&s.length||2*c.perPage):t=0,t}return{mount:r,destroy:u}},Move:function(i,s,o){var u,n=Q(i),t=n.on,c=n.emit,a=i.state.set,r=(n=s.Layout).slideSize,e=n.getPadding,l=n.totalSize,f=n.listSize,d=n.sliderSize,p=(n=s.Direction).resolve,v=n.orient,h=(n=s.Elements).list,g=n.track;function m(){s.Controller.isBusy()||(s.Scroll.cancel(),y(i.index),s.Slides.update())}function y(n){b(x(n,!0))}function b(n,t){i.is(Nt)||(t=t?n:function(n){{var t,e;i.is(zt)&&(t=S(n),e=t>s.Controller.getEnd(),t<0||e)&&(n=w(n,e))}return n}(n),L(h,"transform","translate"+p("X")+"("+t+"px)"),n!==t&&c(Hn))}function w(n,t){var e=n-P(t),i=d();return n-=v(i*(Sn(H(e)/i)||1))*(t?1:-1)}function E(){b(C(),!0),u.cancel()}function S(n){for(var t=s.Slides.get(),e=0,i=1/0,o=0;o<t.length;o++){var r=t[o].index,u=H(x(r,!0)-n);if(!(u<=i))break;i=u,e=r}return e}function x(n,t){var e=v(l(n-1)-(n=n,"center"===(e=o.focus)?(f()-r(n,!0))/2:+e*r(n)||0));return t?(n=e,n=o.trimSpace&&i.is(Mt)?q(n,0,v(d(!0)-f())):n):e}function C(){var n=p("left");return F(h)[n]-F(g)[n]+v(e(!1))}function P(n){return x(n?s.Controller.getEnd():0,!!o.trimSpace)}return{mount:function(){u=s.Transition,t([Y,Fn,K,J],m)},move:function(n,t,e,i){var o,r;n!==t&&(o=e<n,r=v(w(C(),o)),o?0<=r:r<=h[p("scrollWidth")]-F(g)[p("width")])&&(E(),b(w(C(),e<n),!0)),a(R),c(U,t,e,n),u.start(t,function(){a(3),c(Dn,t,e,n),i&&i()})},jump:y,translate:b,shift:w,cancel:E,toIndex:S,toPosition:x,getPosition:C,getLimit:P,exceededLimit:function(n,t){t=un(t)?C():t;var e=!0!==n&&v(t)<v(P(!1)),n=!1!==n&&v(t)>v(P(!0));return e||n},reposition:m}},Controller:function(o,r,u){var s,c,a,l,n=Q(o),t=n.on,e=n.emit,f=r.Move,d=f.getPosition,i=f.getLimit,p=f.toPosition,v=(n=r.Slides).isEnough,h=n.getLength,g=u.omitEnd,m=o.is(zt),y=o.is(Mt),b=O(P,!1),w=O(P,!0),E=u.start||0,S=E;function x(){c=h(!0),a=u.perMove,l=u.perPage,s=L();var n=q(E,0,g?s:c-1);n!==E&&(E=n,f.reposition())}function C(){s!==L()&&e("ei")}function P(n,t){var e=a||(z()?1:l),e=_(E+e*(n?-1:1),E,!(a||z()));return-1===e&&y&&!xn(d(),i(!n),1)?n?0:s:t?e:k(e)}function _(n,t,e){var i;return v()||z()?((i=function(n){if(y&&"move"===u.trimSpace&&n!==E)for(var t=d();t===p(n,!0)&&Cn(n,0,o.length-1,!u.rewind);)n<E?--n:++n;return n}(n))!==n&&(t=n,n=i,e=!1),n<0||s<n?n=a||!Cn(0,n,t,!0)&&!Cn(s,t,n,!0)?m?e?n<0?-(c%l||l):c:n:u.rewind?n<0?s:0:-1:A(D(n)):e&&n!==t&&(n=A(D(t)+(n<t?-1:1)))):n=-1,n}function k(n){return m?(n+c)%c||0:n}function L(){for(var n=c-(z()||m&&a?1:l);g&&0<n--;)if(p(c-1,!0)!==p(n,!0)){n++;break}return q(n,0,c-1)}function A(n){return q(z()?n:l*n,0,s)}function D(n){return z()?B(n,s):En((s<=n?c-1:n)/l)}function M(n){n!==E&&(S=E,E=n)}function z(){return!un(u.focus)||u.isNavigation}function N(){return o.state.is([R,en])&&!!u.waitForTransition}return{mount:function(){x(),t([K,J,"ei"],x),t(Fn,C)},go:function(n,t,e){var i;N()||-1<(i=k(n=function(n){var t=E;{var e,i;T(n)?(i=n.match(/([+\-<>])(\d+)?/)||[],e=i[1],i=i[2],"+"===e||"-"===e?t=_(E+ +(""+e+(+i||1)),E):">"===e?t=i?A(+i):b(!0):"<"===e&&(t=w(!0))):t=m?n:q(n,0,s)}return t}(n)))&&(t||i!==E)&&(M(i),f.move(n,i,S,e))},scroll:function(n,t,e,i){r.Scroll.scroll(n,t,e,function(){var n=k(f.toIndex(d()));M(g?B(n,s):n),i&&i()})},getNext:b,getPrev:w,getAdjacent:P,getEnd:L,setIndex:M,getIndex:function(n){return n?S:E},toIndex:A,toPage:D,toDest:function(n){return n=f.toIndex(n),y?q(n,0,s):n},hasFocus:z,isBusy:N}},Arrows:function(o,n,t){var e,i,r=Q(o),u=r.on,s=r.bind,c=r.emit,a=t.classes,l=t.i18n,f=n.Elements,d=n.Controller,p=f.arrows,v=f.track,h=p,g=f.prev,m=f.next,y={};function b(){var n=t.arrows;!n||g&&m||(h=p||I("div",a.arrows),g=x(!0),m=x(!1),e=!0,P(h,[g,m]),p)||_(h,v),g&&m&&(an(y,{prev:g,next:m}),fn(h,n?"":"none"),M(h,i=dt+"--"+t.direction),n)&&(u([Y,Dn,J,V,"ei"],C),s(m,"click",O(S,">")),s(g,"click",O(S,"<")),C(),N([g,m],Kn,v.id),c("arrows:mounted",g,m)),u(K,w)}function w(){E(),b()}function E(){r.destroy(),X(h,i),e?(j(p?[g,m]:h),g=m=null):z([g,m],rt)}function S(n){d.go(n,!0)}function x(n){return vn('<button class="'+a.arrow+" "+(n?a.prev:a.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(t.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function C(){var n,t,e,i;g&&m&&(i=o.index,n=d.getPrev(),t=d.getNext(),e=-1<n&&i<n?l.last:l.prev,i=-1<t&&t<i?l.first:l.next,g.disabled=n<0,m.disabled=t<0,N(g,nn,e),N(m,nn,i),c("arrows:updated",g,m,n,t))}return{arrows:y,mount:b,destroy:E,update:C}},Autoplay:function(n,t,e){var i,o,r=Q(n),u=r.on,s=r.bind,c=r.emit,a=qn(e.interval,n.go.bind(n,">"),function(n){var t=f.bar;t&&L(t,"width",100*n+"%"),c("autoplay:playing",n)}),l=a.isPaused,f=t.Elements,d=(r=t.Elements).root,p=r.toggle,v=e.autoplay,h="pause"===v;function g(){l()&&t.Slides.isEnough()&&(a.start(!e.resetProgress),o=i=h=!1,b(),c(Wn))}function m(n){h=!!(n=void 0===n?!0:n),b(),l()||(a.pause(),c(Xn))}function y(){h||(i||o?m(!1):g())}function b(){p&&(k(p,tn,!h),N(p,nn,e.i18n[h?"play":"pause"]))}function w(n){n=t.Slides.getAt(n);a.set(n&&+A(n.slide,Tt)||e.interval)}return{mount:function(){v&&(e.pauseOnHover&&s(d,"mouseenter mouseleave",function(n){i="mouseenter"===n.type,y()}),e.pauseOnFocus&&s(d,"focusin focusout",function(n){o="focusin"===n.type,y()}),p&&s(p,"click",function(){h?g():m(!0)}),u([U,jn,J],a.rewind),u(U,w),p&&N(p,Kn,f.track.id),h||g(),b())},destroy:a.cancel,play:g,pause:m,isPaused:l}},Cover:function(n,t,e){var i=Q(n).on;function o(e){t.Slides.forEach(function(n){var t=cn(n.container||n.slide,"img");t&&t.src&&r(e,t,n)})}function r(n,t,e){e.style("background",n?'center/cover no-repeat url("'+t.src+'")':"",!0),fn(t,n?"none":"")}return{mount:function(){e.cover&&(i(Gn,O(r,!0)),i([Y,K,J],O(o,!0)))},destroy:O(o,!1)}},Scroll:function(n,s,r){var c,a,t=Q(n),e=t.on,l=t.emit,f=n.state.set,d=s.Move,p=d.getPosition,u=d.getLimit,v=d.exceededLimit,h=d.translate,g=n.is(Mt),m=1;function y(n,t,e,i,o){var r,u=p(),e=(E(),!e||g&&v()||(e=s.Layout.sliderSize(),r=Pn(n)*e*En(H(n)/e)||0,n=d.toPosition(s.Controller.toDest(n%e))+r),xn(u,n,1));m=1,t=e?0:t||wn(H(n-u)/1.5,800),a=i,c=qn(t,b,O(w,u,n,o),1),f(en),l(jn),c.start()}function b(){f(3),a&&a(),l(V)}function w(n,t,e,i){var o=p(),i=(n+(t-n)*(t=i,(n=r.easingFunc)?n(t):1-Math.pow(1-t,4))-o)*m;h(o+i),g&&!e&&v()&&(m*=.6,H(i)<10)&&y(u(v(!0)),600,!1,a,!0)}function E(){c&&c.cancel()}function i(){c&&!c.isPaused()&&(E(),b())}return{mount:function(){e(U,E),e([K,J],i)},destroy:E,scroll:y,cancel:i}},Drag:function(u,o,s){var c,t,r,a,l,f,d,p,n=Q(u),e=n.on,v=n.emit,h=n.bind,g=n.unbind,m=u.state,y=o.Move,b=o.Scroll,w=o.Controller,E=o.Elements.track,S=o.Media.reduce,i=(n=o.Direction).resolve,x=n.orient,C=y.getPosition,P=y.exceededLimit,_=!1;function I(){var n=s.drag;T(!n),a="free"===n}function F(n){var t,e,i;f=!1,d||(t=O(n),e=n.target,i=s.noDrag,sn(e,"."+mt+", ."+pt))||i&&sn(e,i)||!t&&n.button||(w.isBusy()?W(n,!0):(p=t?E:window,l=m.is([R,en]),r=null,h(p,At,k,It),h(p,Dt,L,It),y.cancel(),b.cancel(),A(n)))}function k(n){var t,e,i,o,r;m.is(6)||(m.set(6),v("drag")),n.cancelable&&(l?(y.translate(c+D(n)/(_&&u.is(Mt)?5:1)),r=200<M(n),t=_!==(_=P()),(r||t)&&A(n),f=!0,v("dragging"),W(n)):H(D(r=n))>H(D(r,!0))&&(t=n,e=s.dragMinThreshold,i=rn(e),o=i&&e.mouse||0,i=(i?e.touch:+e)||10,l=H(D(t))>(O(t)?i:o),W(n)))}function L(n){var t,e,i;m.is(6)&&(m.set(3),v("dragged")),l&&(e=function(n){return C()+Pn(n)*B(H(n)*(s.flickPower||600),a?1/0:o.Layout.listSize()*(s.flickMaxPages||1))}(t=function(n){if(u.is(zt)||!_){var t=M(n);if(t&&t<200)return D(n)/t}return 0}(t=n)),i=s.rewind&&s.rewindByDrag,S(!1),a?w.scroll(e,0,s.snap):u.is(Nt)?w.go(x(Pn(t))<0?i?"<":"-":i?">":"+"):u.is(Mt)&&_&&i?w.go(P(!0)?">":"<"):w.go(w.toDest(e),!0),S(!0),W(n)),g(p,At,k),g(p,Dt,L),l=!1}function j(n){!d&&f&&W(n,!0)}function A(n){r=t,t=n,c=C()}function D(n,t){return N(n,t)-N(z(n),t)}function M(n){return mn(n)-mn(z(n))}function z(n){return t===n&&r||t}function N(n,t){return(O(n)?n.changedTouches[0]:n)["page"+i(t?"Y":"X")]}function O(n){return"undefined"!=typeof TouchEvent&&n instanceof TouchEvent}function T(n){d=n}return{mount:function(){h(E,At,on,It),h(E,Dt,on,It),h(E,Lt,F,It),h(E,"click",j,{capture:!0}),h(E,"dragstart",W),e([Y,K],I)},disable:T,isDragging:function(){return l}}},Keyboard:function(t,n,e){var i,o,r=Q(t),u=r.on,s=r.bind,c=r.unbind,a=t.root,l=n.Direction.resolve;function f(){var n=e.keyboard;n&&(i="global"===n?window:a,s(i,Rt,v))}function d(){c(i,Rt)}function p(){var n=o;o=!0,h(function(){o=n})}function v(n){o||((n=jt(n))===l(Yn)?t.go("<"):n===l(Un)&&t.go(">"))}return{mount:function(){f(),u(K,d),u(K,f),u(U,p)},destroy:d,disable:function(n){o=n}}},LazyLoad:function(e,n,o){var t=Q(e),i=t.on,r=t.off,u=t.bind,s=t.emit,c="sequential"===o.lazyLoad,a=[Dn,V],l=[];function f(){D(l),n.Slides.forEach(function(i){gn(i.slide,Gt).forEach(function(n){var t=A(n,Wt),e=A(n,Xt);t===n.src&&e===n.srcset||(t=o.classes.spinner,t=cn(e=n.parentElement,"."+t)||I("span",t,e),l.push([n,i,t]),n.src)||fn(n,"none")})}),(c?h:(r(a),i(a,d),d))()}function d(){(l=l.filter(function(n){var t=o.perPage*((o.preloadPages||1)+1)-1;return!n[1].isWithin(e.index,t)||p(n)})).length||r(a)}function p(n){var t=n[0];M(n[1].slide,Ct),u(t,"load error",O(v,n)),N(t,"src",A(t,Wt)),N(t,"srcset",A(t,Xt)),z(t,Wt),z(t,Xt)}function v(n,t){var e=n[0],i=n[1];X(i.slide,Ct),"error"!==t.type&&(j(n[2]),fn(e,""),s(Gn,e,i),s(In)),c&&h()}function h(){l.length&&p(l.shift())}return{mount:function(){o.lazyLoad&&(f(),i(J,f))},destroy:O(D,l),check:d}},Pagination:function(f,n,d){var p,v,t=Q(f),h=t.on,g=t.emit,m=t.bind,y=n.Slides,b=n.Elements,w=n.Controller,E=w.hasFocus,i=w.getIndex,u=w.go,s=n.Direction.resolve,S=b.pagination,x=[];function C(){p&&(j(S?o(p.children):p),X(p,v),D(x),p=null),t.destroy()}function P(n){u(">"+n,!0)}function _(n,t){var e=x.length,i=jt(t),o=k(),r=-1,o=(i===s(Un,!1,o)?r=++n%e:i===s(Yn,!1,o)?r=(--n+e)%e:"Home"===i?r=0:"End"===i&&(r=e-1),x[r]);o&&(dn(o.button),u(">"+r),W(t,!0))}function k(){return d.paginationDirection||d.direction}function L(n){return x[w.toPage(n)]}function A(){var n,t=L(i(!0)),e=L(i());t&&(X(n=t.button,tn),z(n,Qn),N(n,$,-1)),e&&(M(n=e.button,tn),N(n,Qn,!0),N(n,$,"")),g("pagination:updated",{list:p,items:x},t,e)}return{items:x,mount:function n(){C(),h([K,J,"ei"],n);var t=d.pagination;if(S&&fn(S,t?"":"none"),t){h([U,jn,V],A);var t=f.length,e=d.classes,i=d.i18n,o=d.perPage,r=E()?w.getEnd()+1:Sn(t/o);M(p=S||I("ul",e.pagination,b.track.parentElement),v=gt+"--"+k()),N(p,Z,"tablist"),N(p,nn,i.select),N(p,nt,k()===Jn?"vertical":"");for(var u=0;u<r;u++){var s=I("li",null,p),c=I("button",{class:e.page,type:"button"},s),a=y.getIn(u).map(function(n){return n.slide.id}),l=!E()&&1<o?i.pageX:i.slideX;m(c,"click",O(P,u)),d.paginationKeyboard&&m(c,"keydown",O(_,u)),N(s,Z,"presentation"),N(c,Z,"tab"),N(c,Kn,a.join(" ")),N(c,nn,_n(l,u+1)),N(c,$,-1),x.push({li:s,button:c,page:u})}A(),g("pagination:mounted",{list:p,items:x},L(f.index))}},destroy:C,getAt:L,update:A}},Sync:function(e,n,t){var i=t.isNavigation,o=t.slideFocus,r=[];function u(){var n,t;e.splides.forEach(function(n){n.isParent||(c(e,n.splide),c(n.splide,e))}),i&&(n=Q(e),(t=n.on)(Mn,l),t(Bn,f),t([Y,K],a),r.push(n),n.emit(Rn,e.splides))}function s(){r.forEach(function(n){n.destroy()}),D(r)}function c(n,i){n=Q(n);n.on(U,function(n,t,e){i.go(i.is(zt)?e:n)}),r.push(n)}function a(){N(n.Elements.list,nt,t.direction===Jn?"vertical":"")}function l(n){e.go(n.index)}function f(n,t){b(Bt,jt(t))&&(l(n),W(t))}return{setup:O(n.Media.set,{slideFocus:un(o)?i:o},!0),mount:u,destroy:s,remount:function(){s(),u()}}},Wheel:function(u,s,c){var n=Q(u).bind,a=0;function t(n){var t,e,i,o,r;n.cancelable&&(t=(r=n.deltaY)<0,e=mn(n),i=c.wheelMinThreshold||0,o=c.wheelSleep||0,H(r)>i&&o<e-a&&(u.go(t?"<":">"),a=e),r=t,c.releaseWheel&&!u.state.is(R)&&-1===s.Controller.getAdjacent(r)||W(n))}return{mount:function(){c.wheel&&n(s.Elements.track,"wheel",t,It)}}},Live:function(n,t,e){var i=Q(n).on,o=t.Elements.track,r=e.live&&!e.isNavigation,u=I("span",wt),s=qn(90,O(c,!1));function c(n){N(o,it,n),n?(P(o,u),s.start()):(j(u),s.cancel())}function a(n){r&&N(o,et,n?"off":"polite")}return{mount:function(){r&&(a(!t.Autoplay.isPaused()),N(o,ot,!0),u.textContent="…",i(Wn,O(a,!0)),i(Xn,O(a,!1)),i([Dn,V],O(c,!0)))},disable:a,destroy:function(){z(o,[et,ot,it]),j(u)}}}}),qt={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:{slide:at,clone:lt,arrows:dt,arrow:pt,prev:vt,next:ht,pagination:gt,page:mt,spinner:e+"spinner"},i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Yt(n,t,e){var i=t.Slides;function o(){i.forEach(function(n){n.style("transform","translateX(-"+100*n.index+"%)")})}return{mount:function(){Q(n).on([Y,J],o)},start:function(n,t){i.style("transition","opacity "+e.speed+"ms "+e.easing),h(t)},cancel:on}}function Ut(r,n,u){var s,c=n.Move,a=n.Controller,l=n.Scroll,t=n.Elements.list,f=O(L,t,"transition");function e(){f(""),l.cancel()}return{mount:function(){Q(r).bind(t,"transitionend",function(n){n.target===t&&s&&(e(),s())})},start:function(n,t){var e=c.toPosition(n,!0),i=c.getPosition(),o=function(n){var t=u.rewindSpeed;if(r.is(Mt)&&t){var e=a.getIndex(!0),i=a.getEnd();if(0===e&&i<=n||i<=e&&0===n)return t}return u.speed}(n);1<=H(e-i)&&1<=o?u.useScroll?l.scroll(e,o,!1,t):(f("transform "+o+"ms "+u.easing),c.translate(e,!0),s=t):(c.jump(n),t())},cancel:e}}t=function(){function e(n,t){this.event=Q(),this.Components={},this.state=l(1),this.splides=[],this._o={},this._E={};n=T(n)?hn(document,n):n;bn(n,n+" is invalid."),t=d({label:A(this.root=n,nn)||"",labelledby:A(n,Zn)||""},qt,e.defaults,t||{});try{d(t,JSON.parse(A(n,c)))}catch(n){bn(!1,"Invalid JSON")}this._o=Object.create(d({},t))}var n=e.prototype;return n.mount=function(n,t){var e=this,i=this.state,o=this.Components;return bn(i.is([1,7]),"Already mounted!"),i.set(1),this._C=o,this._T=t||this._T||(this.is(Nt)?Yt:Ut),this._E=n||this._E,w(an({},Ht,this._E,{Transition:this._T}),function(n,t){n=n(e,o,e._o);(o[t]=n).setup&&n.setup()}),w(o,function(n){n.mount&&n.mount()}),this.emit(Y),M(this.root,"is-initialized"),i.set(3),this.emit("ready"),this},n.sync=function(n){return this.splides.push({splide:n}),n.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),n.Components.Sync.remount()),this},n.go=function(n){return this._C.Controller.go(n),this},n.on=function(n,t){return this.event.on(n,t),this},n.off=function(n){return this.event.off(n),this},n.emit=function(n){var t;return(t=this.event).emit.apply(t,[n].concat(o(arguments,1))),this},n.add=function(n,t){return this._C.Slides.add(n,t),this},n.remove=function(n){return this._C.Slides.remove(n),this},n.is=function(n){return this._o.type===n},n.refresh=function(){return this.emit(J),this},n.destroy=function(t){void 0===t&&(t=!0);var n=this.event,e=this.state;return e.is(1)?Q(this).on("ready",this.destroy.bind(this,t)):(w(this._C,function(n){n.destroy&&n.destroy(t)},!0),n.emit(a),n.destroy(),t&&D(this.splides),e.set(7)),this},_createClass(e,[{key:"options",get:function(){return this._o},set:function(n){this._C.Media.set(n,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}]),e}();return t.defaults={},t.STATES=i,t});var carousel,splideCarousel=document.querySelector(".JSsplide");splideCarousel&&(carousel=new Splide(splideCarousel,{type:"loop",autoplay:!0,perPage:1,pagination:!1,snap:!0})).mount();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
